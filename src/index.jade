mixin slide(names, slideClasses)
  if names
    section(class=names+' '+slideClasses, data-bespoke-backdrop='backdrop ' + names.split(' ').map(function(name) { return 'backdrop--' + name; }).join(' '))
      block
  else
    section
      block

doctype html
html
  head
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
  title Angular &mdash; Bringing Joy To Web Applications

  link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      +slide
        img.avatar(src='images/utah.jpg')
        h4 @chrismarx

      +slide('orion')
        h1.angular-shield &nbsp;&nbsp;&nbsp;ngular

      +slide
        h3 Build maintainable, testable, and modular applications 
        h2 faster

      +slide("misko")
        h3 &ldquo;There's a lot of Web frameworks out there. What's unique about Angular is ... we have dependency injection, which is very unique. Nobody else has that. The thing that really hits it home is that we have directives. Rather than writing everything inside of JavaScript and then having a bunch of templates to generate the UI, you write a lot of it in HTML and HTML drives the assembly of the application. It's kind of the reverse thing. It's very unique&rdquo;
        h4 -Misko Hevery, Angular creator

      +slide('jquery')
        h3 Why do we need frameworks?
        pre.language-javascript
          code.
            var $accordionContainer;

            $accordionContainer = $("#accordion-container");
            $accordionContainer.accordion();

      +slide('jqueryaccordion')
        h3.bullet jQuery was AWESOME
        h3.bullet So long cross browser inconsistencies
        h3.bullet Hello Ajax
        h3.bullet A sane api for document traversal (selectors)
        h3.bullet Animations
        h3.bullet Plugins!

      +slide('urkel')
        h2(style='margin-left:-137px;top:6px;').bullet.meme-impact AND WE WERE COOL
        h1(style='border:none;bottom:-45px;margin-left:-196px;').bullet.meme-impact BUT NOT REALLY

      +slide()
        h1 What about:
        h3 Dealing with Dependencies
        h3 Data-Driven from REST Apis
        h3 Routing and Deep Linking
        h3 Reactive/Interactive components
        h3 Testing
        h3 Standard Conventions
        h3 Code Length and Complexity

      +slide("barkley")
        h2(style='top:6px;margin-left:-398px;').meme-impact Can we write an app like gmail with jquery?

      +slide  
        iframe(src="http://todomvc.com/" style="width:100%; height:100%;")
        
      //Controlling complexity is the essence of computer programming. - Brian Kernighan
      +slide    
        iframe(src="http://blog.coderstats.net/todomvc-complexity/" style="width:100%; height:100%;")
        p http://blog.coderstats.net/todomvc-complexity/

      +slide('angrycat')
        h2(style='top:6px;margin-left:-358px').meme-impact THERE'S ONLY TWO THINGS I DON'T LIKE
        h1(style='border:none;bottom:-45px;margin-left:-350px').meme-impact CHANGE AND THE WAY THINGS ARE

      +slide("whousesangular")
        div.footer-reference
          p(style="text-align:left") ref:
            a(href="https://www.linkedin.com/groups/How-many-large-enterprise-apps-5010991.S.5807183502503862274") https://www.linkedin.com/groups/How-many-large-enterprise-apps
            a(href="http://thecoderfactory.com/posts/top-sites-built-with-angularjs") http://thecoderfactory.com/posts/top-sites-built-with-angularjs
      
      +slide("angularadoption light-grey")
        div(style="position:absolute;top:25%;left:25%;").bold.no-italics
          h3.bullet 
          h3.bullet Angular 1.0 released June 2012
          h3.bullet(style="margin-top:70px;") Angular 1.1.5 released June 2013
        div.footer-reference
          p(style="text-align:left") ref:
            a(href="https://www.google.com/trends/explore#q=angularjs%20%2B%20angular%2C%20jquery%2C%20react%2C%20ember%2C%20backbone&date=1%2F2011%2049m&cmpt=q&tz=") https://www.google.com/trends/explore#q=angularjs%20%2B%20angular%2C%20jquery%2C%20react%2C%20ember%2C%20backbone&date=1%2F2011%2049m&cmpt=q&tz=
      
      +slide("angularadoption2")
        div.footer-reference
          p(style="text-align:left") ref:
            a(href="https://www.airpair.com/js/javascript-framework-comparison") https://www.airpair.com/js/javascript-framework-comparison
      
      +slide("angularadoption3")
        div.footer-reference
          p(style="text-align:left") ref:
            a(href="https://www.airpair.com/js/javascript-framework-comparison") https://www.airpair.com/js/javascript-framework-comparison
      
      +slide("angularadoption4")
        div.footer-reference
          p(style="text-align:left") ref:
            a(href="http://stackoverflow.com/research/developer-survey-2015?utm_medium=social&utm_campaign=stack-overflow-survey&utm_source=facebook.com#tech-lang") http://stackoverflow.com/research/developer-survey-2015?utm_medium=social&utm_campaign=stack-overflow-survey&utm_source=facebook.com#tech-lang
  
      +slide
        h2. and of course we're using it at the lab, yardmap, all about bird biology

      +slide
        img(src="images/todomvc.svg" height="35" style="position:absolute;")
        iframe(src="http://localhost:8080/#/" style="width:100%; height:100%;")

      +slide()
        h1 Learning Angular
        h3 Controllers, $scope, partials/templates
        h3 Services, Factories, Providers
        h3 Directives, Transclusion
        h3 Dependency Injection
        h3 Modules
  
      +slide("still seinfeld")
          

      +slide
        iframe(src="http://localhost:8080/js/partials/index-partial-plain-highlighted.html" style="width:100%; height:100%; margin:0;")

      +slide
        iframe(src="http://localhost:8080/js/partials/index-partial-plain.html" style="width:100%; height:100%; margin:0;")

      +slide
        iframe(src="http://localhost:8080/js/partials/index-partial-highlighted.html" style="width:100%; height:100%; margin:0;")

      +slide
        iframe(src="http://localhost:8080/js/partials/index-partial.html" style="width:100%; height:100%; margin:0;")

      +slide('whoa')
        h2 WHOA

      +slide  
        iframe(src="https://angularjs.org/#the-basics" style="width:100%; height:100%;")

              
      +slide('angularjs')
        h2 Dirty checking
        h3 &mdash; a.k.a. $scope.$digest( ) &mdash;

      
      +slide
        h2.single-words No idea it changed

      +slide
      h1 Solutions?  
      h2 Cover the common solutions? backbone, emberjs, react?
      h2 Mostly all trying to do the same thing. 
      h2 Cut down on code with a framework to handle common tasks


      +slide('backbonejs')
        pre.language-javascript
          code.
            var model = new Model();

            model.set('foo', 'bar');
            model.get('foo');

      +slide('jquery')
        pre.language-javascript
          code.
            var model = new Model();

            model.set('foo', 'bar');
            model.get('foo');

      //angular quote
      +slide
        h3(style='width:490px') &ldquo;Angular models are plain old JavaScript objects. This makes your code easy to test, maintain, reuse, and again free from boilerplate.&rdquo;

      +slide
        h1 Object.observe

      +slide
        pre.language-javascript
          code.
            // Add a property
            o.foo = 'bar';

            // Change record:
            [{ name: "foo",
               object: o,
               type: "add" }]
      +slide
        pre.language-javascript
          code.
            // Update a property:
            o.foo = 123;

            // Change record
            [{ name: "foo",
               object: o,
               oldValue: "bar",
               type: "update" }]
      +slide
        pre.language-javascript
          code.
            delete o.foo;

            // Change record:
            [{ name: "foo",
               object: o,
               oldValue: 123,
               type: "delete" }]

      +slide
        pre.language-javascript
          code.
            var a = [];

            Array.observe(a, function(changes) {
              console.log(changes);
            });
      +slide
        pre.language-javascript
          code.
            a.push(1);

            // Change record:
            [{ addedCount: 1,
               index: 0,
               object: a,
               removed: [],
               type: "splice" }]

      +slide
        h2.single-words Synthetic change events

      +slide
        pre.language-javascript
          code.
            Object.getNotifier(o).notify({
              type: 'update',
              name: 'foo',
              oldValue: 'bar'
            });

      +slide
        h2 Binding<br><br><br>plain old data<br><br><br>to the<br><br><br>DOM

      +slide('chrome')
        h3 Available now in
        h2 Chrome Stable

      +slide
        h2.single-words Seems uncontroversial enough

      +slide('still lightning')
        h2 Dissent
        h3 &mdash; is &mdash;
        h2 brewing

      +slide
        h2 Mutability
        h3 &mdash; vs. &mdash;
        h2 Immutability

      +slide
        h1 Immutable<br>values

      +slide
        pre.language-javascript
          code.
            // 'hello' is immutable
            var str = 'hello';

            str.replace('hello', 'goodbye');
            str.slice(2);
            str.concat(' there');

            str; // still equals 'hello'

      +slide
        h2 Simple comparisons
        pre.language-javascript
          code.
            'hello' === 'hello';

      +slide
        h3 We&rsquo;ve been treating
        h2 arrays
        h3 &mdash; like they&rsquo;re &mdash;
        h2 immutable

      +slide
        pre.small.language-javascript
          code.
            // Old and scary:

            var nums = [1,2,3,4,5];

            for (var i = 0; i &lt; nums.length; i++) {
              // Cube all numbers
              nums[i] = nums[i] * nums[i] * nums[i];

              // Remove uneven items
              if (nums[i] % 2 !== 0) {
                nums.splice(i, 1);
                i--;
              }
            }

      +slide
        pre.language-javascript
          code.
            // New and simple:

            var nums = [1,2,3,4,5]
              .map(x => x * x * x)
              .filter(x => x % 2 == 0);

      +slide
        h2 Every map, filter
        h3 &mdash; results in a &mdash;
        h2 New array

      +slide
        pre.language-javascript
          code.
            // Unfortunately,
            // not actually immutable :(

            nums.push(123);

      +slide
        h2 No simple comparisons
        pre.language-javascript
          code.
            assert([1,2,3] !== [1,2,3]);

      +slide
        h2 Cleaner code
        h3 &mdash; with &mdash;
        h2 Fewer bugs

      +slide
        h2.single-words Why are objects different?

      +slide
        h2 What if every change
        h3 &mdash; resulted in a &mdash;
        h2 new object?

      +slide('swannodette')
        h4 David Nolen
        br
        h1 Mori
        br
        h4 Via ClojureScript

      +slide
        pre.language-javascript
          code.
            // Create:
            var map1 = mori.hash_map('foo', 1);

            // Update:
            var map2 = mori.conj(m, mori.vector('bar', 2));

            // Returns a new hash map:
            { 'foo': 1, 'bar': 2 }

      +slide('leebyron')
        h4 Lee Byron
        br
        h1 Immutable-js
        br
        h4 Facebook

      +slide
        pre.language-javascript
          code.
            // Create:
            var map1 = Immutable.Map({ foo: 1 });

            // Update:
            var map2 = map1.merge({ bar: 2 });

            // Returns a new map:
            { "foo": 1, "bar": 2 }

      +slide
        h2 Simple comparisons!
        pre.language-javascript
          code.
            var map1 = Immutable.Map({ foo: 'bar' });
            var map2 = map1.merge({ foo: 'bar' });

            assert(map1 === map2); // :D !!!

      +slide
        pre.language-javascript
          code.
            var map1 = Immutable.Map({ foo: 'bar' });
            var map2 = Immutable.Map({ foo: 'bar' });

            assert(Immutable.is(map1, map2));

      +slide
        h2 Is this redundant
        h3 &mdash; when we have &mdash;
        h2 Stateful DOM?

      +slide
        h1 React

      +slide
        h3(style='width:440px') &ldquo;Simply express how your app should look at any given point in time, and React will automatically manage all UI updates&rdquo;

      +slide
        h2.single-words Essentially stateless DOM

      +slide('mattesch')
        h4 Matt Esch
        br
        h1 virtual-dom
        br
        h4 Inspired by React

      +slide
        h2.single-words What&rsquo;s the big deal?

      +slide('swannodette')
        h4 David Nolen
        br
        h1 Om
        br
        h4 React + ClojureScript

      +slide
        h2 Entire UI state
        h3 &mdash; in a &mdash;
        h2 Single, immutable object

      +slide
        h2 &ldquo;The future
        h3 &mdash; of &mdash;
        h2 JavaScript MVCs&rdquo;


      +slide('yellow')
        h1 ES7

      +slide('still poisonapple')
        h3 &mdash; Is Object.observe &mdash;
        h2 What we want
        h3 &mdash; rather than &mdash;
        h2 What we need?


      +slide
        a(href='https://cm325.github.io/todomvc/examples/anuglarjs-perf/')
          h2 References

      +slide
        img.avatar(src='images/utah.jpg')
        br
        h2 Thanks
        a(href='http://cm325.github.io/astateofchange', style='border:none')
          h3 bit.ly/astateofchange

    script(src='build/build.js')
